import numpy as np
from scipy.integrate import solve_ivp

#constants 
half_life_U_238 = (4.5*(10^9))*365.35*24*60*60 # in seconds
decay_const_U_238 = np.log(2)/half_life_U_238
branching ratio= 0.7 /100 # u238 dont have gamma ray so neutron capture rate ??

N_U_238 = 1000 #some random number
activity_U_238 = decay_const_U_238 * N_U_238
phi_0 = branching_ratio* activity_U_238


def flux(t, phi_0, flux_decay_constant): # for U-238, not sure about this formula
    flux = phi_0 *np.exp(-flux_decay_constant *t)
    return flux

#idk about sigma_U238
    

def diffeq1(N_U_238, flux_U_238, sigma_U_238): #rate of change of N_U-239 over time
    rate_of_change_U238 = (-1*half_life_U_238*N_U_238) - (flux_U_238*sigma_U_238*N_U_238)
    return rate_of_change_U238

fluxU238 = flux(5,phi_0, 0.08) //flux decay is some random number

diff_eq1 = diffeq1(N_U_238,fluxU238, .23)//sigma_U_238 is some random number

time_span = [0, 10 * 365.25 * 24 * 60 * 60]

soln = solve_ivp(diff_eq1, time_span, [N_U_238], t_eval=np.linspace(time_span[0], time_span[1], 100))


def diffeq2():
    return 0


def diffeq3and4():
    return 0

